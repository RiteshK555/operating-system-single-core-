//execution handler

//save the sp in its process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

//save sp
alias userSP R0;
userSP = SP;

//set stack pointer to point to kernel stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

//set mode flag as read sys call
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;


//convert sp-4 to real addr
alias physicalPageNum R1;
alias offset R2;
alias fileNamePhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileNamePhysicalAddr = (physicalPageNum * 512) + offset;
alias fileName R4;
fileName=[fileNamePhysicalAddr];

//set pointer 
alias inode_index R5;
inode_index = 0;


//find the corresponding file
while(inode_index < MAX_FILE_NUM) do
  if(([INODE_TABLE + inode_index * 16 + 1] == fileName) && ([INODE_TABLE + inode_index * 16 ] == EXEC)) then
    break;
  endif;
  inode_index = inode_index + 1;
endwhile;


if(inode_index == MAX_FILE_NUM)then
  // set ret val = -1
  [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
  
  //change sp to user stack
  SP = userSP; 
   
  //change mode flag val 
  [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
  
  //ireturn
  ireturn;
endif;


//call the exit process function to deallocate the resources
//multipush
multipush(R0, R1, R2, R3, R4, R5);

//exit process

//set fun num in R1
R1 = EXIT_PROCESS;

//set process id in R2
R2 = [SYSTEM_STATUS_TABLE + 1];

//call process manager
call PROCESS_MANAGER;

//multipop
multipop(R0, R1, R2, R3, R4, R5);

//get the user area page
alias user_area_page_no R6;
user_area_page_no = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];

//increment in mem free list
[MEMORY_FREE_LIST + user_area_page_no] = [MEMORY_FREE_LIST + user_area_page_no] + 1;

//decrement in no of free mem pages
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

//change SP to starting of kernel stack of new process
SP = user_area_page_no * 512 - 1;

//update state of the new process to running
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = RUNNING;

//store the inode index in process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7] = inode_index;



//allocate space for library

//lib page no 1
[PTBR + 0] = 63;
[PTBR + 1] = "0100";


//validate disk map table for lib page no 1
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 0] = -1;

//lib page no 2
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//validate disk map table for lib page no 2
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 1] = -1;

//allocate space for heap pages

//heap page no 1


//set heap page
[PTBR + 4] = -1;

//set permissions
[PTBR + 5] = "0000";

//validate disk map table for heap page no 1
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 2] = -1;

//heap page no 2

//set heap page
[PTBR + 6] = -1;

//set permissions
[PTBR + 7] = "0000";

//validate disk map table for heap page no 2
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 3] = -1;

//allocate space for code pages

//code page no 1

//first call get code page



//multipush
multipush(R0, R1, R2, R3, R4, R5, R6);

//set fun no
R1 = GET_CODE_PAGE;

//set block no
R2 = [INODE_TABLE + inode_index * 16 + 8];

//call memory manager
call MEMORY_MANAGER;

[PTBR + 8] = R0;
[PTBR + 9] = "0100";

//validate in mem free list
[MEMORY_FREE_LIST + R0] = 1;


//multipop
multipop(R0, R1, R2, R3, R4, R5, R6);



//validate in disk map table for first code block
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 4] = [INODE_TABLE + inode_index * 16 + 8];

//code page no 2
[PTBR + 10] = -1;
[PTBR + 11] = "0000";

//validate disk map table for code page no 2
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 5] = -1;

//code page no 3
[PTBR + 12] = -1;
[PTBR + 13] = "0000";

//validate disk map table for code page no 3
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 6] = -1;

//code page no 4
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//validate disk map table for code page no 4
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 7] = -1;



//allocate space for stack page

//stack page no 1
//multipush
multipush(R0, R1, R2, R3, R4, R5, R6);

//get free page

//set fun no
R1 = GET_FREE_PAGE;

//call mem manager
call MEMORY_MANAGER;

//validate mem free list entry
[MEMORY_FREE_LIST + R0] = 1;

//set stack page
[PTBR + 16] = R0;

//set permissions
[PTBR + 17] = "0110";

//multipop
multipop(R0, R1, R2, R3, R4, R5, R6);



//validate disk map table for stack page no 1
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 8] = -1;



//save ip of next instruction in user stack;
[[PTBR + 16] * 512] = [[PTBR + 8] * 512 + 1];

//stack page no 2

//multipush
multipush(R0, R1, R2, R3, R4, R5, R6);

//get free page

//set fun no
R1 = GET_FREE_PAGE;

//call mem manager
call MEMORY_MANAGER;

//validate mem free list entry
[MEMORY_FREE_LIST + R0] = 1;

//set stack page
[PTBR + 18] = R0;

//set permissions
[PTBR + 19] = "0110";

//multipop
multipop(R0, R1, R2, R3, R4, R5, R6);



//validate disk map table for stack page no 2
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + 9] = -1;

//set stack pointer to user stack
SP = 8 * 512;

//reset mode flag as read sys call
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

//fill per process resource table

//resource table pointer
alias resource_table_ptr R10;
resource_table_ptr = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512  + RESOURCE_TABLE_OFFSET;

//initialze resource table
[resource_table_ptr + 0] = -1;
[resource_table_ptr + 1] = -1;
[resource_table_ptr + 2] = -1;
[resource_table_ptr + 3] = -1;
[resource_table_ptr + 4] = -1;
[resource_table_ptr + 5] = -1;
[resource_table_ptr + 6] = -1;
[resource_table_ptr + 7] = -1;
[resource_table_ptr + 8] = -1;
[resource_table_ptr + 9] = -1;
[resource_table_ptr + 10] = -1;
[resource_table_ptr + 11] = -1;
[resource_table_ptr + 12] = -1;
[resource_table_ptr + 13] = -1;
[resource_table_ptr + 14] = -1;
[resource_table_ptr + 15] = -1;


//no return value

ireturn;
