//exception handler

//set mode flag for current process to -1 for execption handler
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = -1;

//save user stack ptr
alias userSP R0;
userSP = SP;

//save sp in process table of current process
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = SP;

//set stack ptr to kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//backup regs
backup;

//multipush EIP
multipush(EIP);

if((EC != 0) || (userSP == 10 * 512 - 1))then

  //fun no
  R1 = EXIT_PROCESS;

  //process id
  R2 = [SYSTEM_STATUS_TABLE + 1];

  //call process manager fn
  call PROCESS_MANAGER;

  print "######";

  //print cause
  print "cause";
  print EC;

  //instr pointer
  print "ip";
  print EIP;

  //page no
  print "page no";
  print EPN;

  //mem addr
  print "mem addr";
  print EMA;

  print "######";
  
  //schedule another process
  call CONTEXT_SWITCH;

  ireturn;
   
endif;

//invoke get code page to get page no for this page

//if excep is from code page

if((EPN >= 4) && (EPN <= 7))then

  //multipush
  multipush(R0, R1);

  //set fun no
  R1 = GET_CODE_PAGE;

  //set block no
  R2 = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + EPN];

  //call memory manager
  call MEMORY_MANAGER;

  //set page val in page table
  [PTBR + EPN * 2 + 0] = R0;

  //set in mem free list
  [MEMORY_FREE_LIST + R0] = 1;

  //multipop
  multipop(R0, R1); 
 
  //set permissions

  //code page

  [PTBR + EPN * 2 + 1] = "1100"; 

endif;

//if exception is from heap page

if((EPN >= 2) && (EPN <= 3))then
  
  //for heap allocate both pages 
 
  //heap no 1
 
  //multipush
  multipush(R0, R1);

  //set fun no
  R1 = GET_FREE_PAGE;

  //call mem manager
  call MEMORY_MANAGER;

  //set page for heap no 1
  [PTBR + 4] = R0;
  [PTBR + 5] = "1110";

  //set in mem free list
  [MEMORY_FREE_LIST + R0] = 1;

  //multipop
  multipop(R0, R1);

  //heap no 2

  //multipush
  multipush(R0, R1);

  //set fun no
  R1 = GET_FREE_PAGE;
  
  //call mem manager
  call MEMORY_MANAGER;

  //set page for heap no 2
  [PTBR + 6] = R0;
  [PTBR + 7] = "1110";

  //set in mem free list
  [MEMORY_FREE_LIST + R0] = 1;

  //multipop
  multipop(R0, R1); 

endif;

//reset the mode flag
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

//restore EIP
multipop(EIP);

//restore regs
restore;

//push the reg for re execution (into user stack)
SP = userSP;
multipush(EIP);


//return to user mode
ireturn;


