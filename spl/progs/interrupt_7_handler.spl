//system call no assigned to mode flag in process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;

alias userSP R0;
userSP = SP;

//save the stack pointer to process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

//set the stack pointer to kernel stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

//get the val in arg 1 after manual addr translation
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor = [fileDescPhysicalAddr];

if (fileDescriptor != -2)
then 
  alias physicalAddrRetVal R5;
  physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
  [physicalAddrRetVal] = -1;
else 
  alias word R5;
  word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
  multipush(R0, R1, R2, R3, R4, R5);
  R1 = TERMINAL_WRITE;
  R2 = [SYSTEM_STATUS_TABLE + 1];
  R3 = word;
  call DEVICE_MANAGER;
  multipop(R0, R1, R2, R3, R4, R5);
  alias physicalAddrRetVal R6;
  physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
  [physicalAddrRetVal] = 0;

endif;

//reset the stack pointer value and change the mode flag
SP = userSP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

//change control to user
ireturn; 
