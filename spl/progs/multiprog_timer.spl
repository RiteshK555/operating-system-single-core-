//set the stack pointer 
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13] = SP; 

//set sp to kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11] * 512 - 1;

//backup
backup;

//current process id
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

//current process table addr
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;
//set kernel ptr
[process_table_entry + 12] = SP % 512;
//set page table base reg
[process_table_entry + 14] = PTBR;
//set page table len reg
[process_table_entry + 15] = PTLR;
//set ready
[process_table_entry + 4] = READY;

//change the process
alias newPID R2;
if(currentPID == 0) then
  newPID = 1;
else 
  newPID = 0;
endif;

//restore the reg values from process table
alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;
//set back all regs
SP = [new_process_table + 11] * 512 + [new_process_table+12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
//set new pid
[SYSTEM_STATUS_TABLE+1] = newPID;


if([new_process_table + 4] == CREATED) then
  [new_process_table + 4] = RUNNING;
  SP = [new_process_table + 13];
  ireturn;
endif;


//set the process to running
[new_process_table + 4] = RUNNING;


//restore the reg vals from kernel stack
restore;

//change SP to user stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]) * 16 + 13];

ireturn;
