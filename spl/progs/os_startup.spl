//boot module
loadi(54, 67);
loadi(55, 68);

//idle process code
loadi(69, 11);
loadi(70, 12); 

//load int7 handler
loadi(16, 29);
loadi(17, 30);

//timer
loadi(4,17);
loadi(5,18);

//init
loadi(65,7);
loadi(66,8);

//exit
loadi(22,35);
loadi(23,36);

//exhanlder
loadi(2,15);
loadi(3,16);

//library
loadi(63,13);
loadi(64,14);

//set page table base reg
PTBR = PAGE_TABLE_BASE;

//idle process page table memory alloc
//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 84;
[PTBR+5] = "0110";
[PTBR+6] = -1;
[PTBR+7] = "0110";

//code 
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";


//init process process table
//library
[PTBR+20] = 63;
[PTBR+21] = "0100";
[PTBR+22] = 64;
[PTBR+23] = "0100";

//heap
[PTBR+24] = 78;
[PTBR+25] = "0110";
[PTBR+26] = 79;
[PTBR+27] = "0110";

//code 
[PTBR+28] = 65;
[PTBR+29] = "0100";
[PTBR+30] = 66;
[PTBR+31] = "0100";
[PTBR+32] = -1;
[PTBR+33] = "0000";
[PTBR+34] = -1;
[PTBR+35] = "0000";

//stack
[PTBR+36] = 76;
[PTBR+37] = "0110";
[PTBR+38] = 77;
[PTBR+39] = "0110";


//set pid for idle process in its process table
[PROCESS_TABLE+1] = 0;
//set pid for init process in its process table
[PROCESS_TABLE+17] = 1;

//set states of processes in process table
// idle process
[PROCESS_TABLE+4] = CREATED;
//init process
[PROCESS_TABLE+20] = RUNNING;

//set user area page no for idle process
[PROCESS_TABLE+11] = 82;
//set kernel stack pointer to 0
[PROCESS_TABLE+12] = 0;
//set user stack pointer
[PROCESS_TABLE+13] = 8*512;
//set page table base reg
[PROCESS_TABLE+14] = PAGE_TABLE_BASE;
//set page table len reg
[PROCESS_TABLE+15] = 10;

//set entry point ip 
[81*512] = [69*512+1];

//init process
//set page table base reg
[PROCESS_TABLE+30] = PAGE_TABLE_BASE+20;
//set user area page no 
[PROCESS_TABLE+31] = 10;
//set user area addr 
[PROCESS_TABLE+27] = 83;
//set user stack val
[PROCESS_TABLE+29] = 8*512;
//set kernel stack pointer
[PROCESS_TABLE+28] = 0;
//set page table len reg
[PROCESS_TABLE+31] = 10;

//initialize regs for init process
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;
SP = 8*512;

//set entry point ip for init process
[76*512] = [65*512+1];

//set the process id in system status table to 1
[SYSTEM_STATUS_TABLE+1] = 1;


ireturn;
