//boot module

//load boot module
loadi(52, 67);
loadi(53, 68);

//load int 16
loadi(34, 47);
loadi(35, 48);

//load shell process
loadi(67, 9);
loadi(68, 10);

//load int 12
loadi(26, 39);
loadi(27, 40);

//load int 17
loadi(36, 49);
loadi(37, 50);
  

//load module 3
loadi(46, 59);
loadi(47, 60);

//load int 5
loadi(12, 25);
loadi(13, 26);

//load root file
loadi(62, 5);


//load int 4 routine
loadi(10, 23);
loadi(11, 24);

//load int 13 routine
loadi(28, 41);
loadi(29, 42);

//load int 14 routine
loadi(30, 43);
loadi(31, 44);

//load int 11 routine
loadi(24, 37);
loadi(25, 38);

//load int 15 routine
loadi(32, 45);
loadi(33, 46);

//load fork sys call
loadi(18, 31);
loadi(19, 32);

//load disk free list
loadi(61, 2);

//load disk interrupt handler
loadi(6, 19);
loadi(7, 20);

//load inode user table
loadi(59, 3);
loadi(60, 4);

//load int 9 handler
loadi(20, 33);
loadi(21, 34);

//load process manager module
loadi(42, 55);
loadi(43, 56);

//load memory manager module
loadi(44, 57);
loadi(45, 58);

//load console interrupt handler
loadi(8, 21);
loadi(9, 22);

//int 6 handler
loadi(14, 27);
loadi(15, 28);

//load resource manager module
loadi(40, 53);
loadi(41, 54);

//load device manager
loadi(48, 61);
loadi(49, 62);

//load the scheduler
loadi(50,63);
loadi(51,64);

//load int7 handler
loadi(16, 29);
loadi(17, 30);

//timer
loadi(4,17);
loadi(5,18);

//init
loadi(65,7);

//exit
loadi(22,35);
loadi(23,36);

//exhanlder
loadi(2,15);
loadi(3,16);

//library
loadi(63,13);
loadi(64,14);

//swapped count in sys stat
[SYSTEM_STATUS_TABLE + 4] = 0;

//paging status
[SYSTEM_STATUS_TABLE + 5] = 0;

//initialize disk status
[DISK_STATUS_TABLE + 0] = 0;

//set status field in terminal status table
[TERMINAL_STATUS_TABLE] = 0;

//set page table base reg for init process
PTBR = PAGE_TABLE_BASE + 20;

//init process process table

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";

[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = -1;
[PTBR+5] = "0000";

[PTBR+6] = -1;
[PTBR+7] = "0000";

//code 
[PTBR+8] = 65;
[PTBR+9] = "0100";

[PTBR+10] = -1;
[PTBR+11] = "0000";

[PTBR+12] = -1;
[PTBR+13] = "0000";

[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 66;
[PTBR+17] = "0110";

[PTBR+18] = -1;
[PTBR+19] = "0000";

//init process table addr
alias process_table_init_addr R0;
process_table_init_addr = PROCESS_TABLE + 16 * 1;

//init process
[process_table_init_addr + 4] = CREATED;

//set pid
[process_table_init_addr + 1] = 1;

//set page table base reg
[process_table_init_addr + 14] = PAGE_TABLE_BASE+20;

//set user area addr 
[process_table_init_addr + 11] = 77;

//mark in mem free list
[MEMORY_FREE_LIST + 77] = 1;

//set user stack val
[process_table_init_addr + 13] = 8*512;

//set kernel stack pointer
[process_table_init_addr + 12] = 0;

//set page table len reg
[process_table_init_addr + 15] = 10;

//set userid
[process_table_init_addr + 3] = 1;

//set entry point ip for init process
[66*512] = [65*512+1];

//initialize per process resource table for init process

//ptr
alias ptr R1;
ptr = 0;

//tick field in processes
while(ptr < MAX_PROC_NUM)do

  //tick
  [PROCESS_TABLE + ptr * 16 + 0] = 0;

  ptr = ptr + 1;

endwhile;

//initialize resource table
while(ptr < 16)do
  
  //set resource 
  [[PROCESS_TABLE + 27] * 512 + RESOURCE_TABLE_OFFSET + ptr] = -1;

  ptr = ptr + 1;

endwhile;

ptr = 0;

//initialize semaphore table
while(ptr < 32)do

  //set semaphore

  //set locking pid
  [SEMAPHORE_TABLE + ptr * 4 + 0] = -1;

  //set num processes
  [SEMAPHORE_TABLE + ptr * 4 + 1] = 0;

  ptr = ptr + 1;

endwhile;

ptr = 0;

//initialize file status table
while(ptr < MAX_FILE_NUM)do

  //locking pid
  [FILE_STATUS_TABLE + ptr * 4 + 0] = -1;

  //set no of processes using
  [FILE_STATUS_TABLE + ptr * 4 + 1] = -1;

  ptr = ptr + 1;

endwhile;

ptr = 0;

//initialize buffer table
while(ptr < 4)do

  //set block no 
  [BUFFER_TABLE + ptr * 4 + 0] = -1;

  //set dirty bit
  [BUFFER_TABLE + ptr * 4 + 1] = 0;

  //set locking pid
  [BUFFER_TABLE + ptr * 4 + 2] = -1;

  ptr = ptr + 1;

endwhile;

ptr = 0;

//initialize open file table
while(ptr < MAX_OPENFILE_NUM)do

  //inode index  
  [OPEN_FILE_TABLE + ptr * 4 + 0] = -1;

  //open instance count
  [OPEN_FILE_TABLE + ptr * 4 + 1] = 0;

  ptr = ptr + 1;

endwhile;

//disk map table shell addr
alias disk_map_table_shell_addr R2;
disk_map_table_shell_addr = DISK_MAP_TABLE + 2 * 10;

//executing process
PTBR = PAGE_TABLE_BASE + 2 * 20;

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";

//mark in disk map table
[disk_map_table_shell_addr + 0] = -1;

[PTBR+2] = 64;
[PTBR+3] = "0100";

//mark in disk map table
[disk_map_table_shell_addr + 1] = -1;

//heap
[PTBR+4] = -1;
[PTBR+5] = "0000";

//mark in disk map table
[disk_map_table_shell_addr + 2] = -1;

[PTBR+6] = -1;
[PTBR+7] = "0000";

//mark in disk map table
[disk_map_table_shell_addr + 3] = -1;

//code 
[PTBR+8] = 67;
[PTBR+9] = "0100";

//mark in disk map table
[disk_map_table_shell_addr + 4] = 9;

[PTBR+10] = 68;
[PTBR+11] = "0100";

//mark in disk map table
[disk_map_table_shell_addr + 5] = 10;

[PTBR+12] = -1;
[PTBR+13] = "0000";

//mark in disk map table
[disk_map_table_shell_addr + 6] = -1;


[PTBR+14] = -1;
[PTBR+15] = "0000";

//mark in disk map table
[disk_map_table_shell_addr + 7] = -1;

//stack
[PTBR+16] = 78;
[PTBR+17] = "0110";

//mark in disk map table
[disk_map_table_shell_addr + 8] = -1;


[PTBR+18] = 79;
[PTBR+19] = "0110";

//mark in disk map table
[disk_map_table_shell_addr + 9] = -1;


//mark stack page in mem free list
[MEMORY_FREE_LIST + 78] = 1;
[MEMORY_FREE_LIST + 79] = 1;

//process table shell addr
alias process_table_shell_addr R3;
process_table_shell_addr = PROCESS_TABLE + 2 * 16;

//set state
[process_table_shell_addr + 4] = TERMINATED;

//set pid 
[process_table_shell_addr + 1] = 2;

//set ppid
[process_table_shell_addr + 2] = 1;

//set page table base reg
[process_table_shell_addr + 14] = PAGE_TABLE_BASE + 2 * 20;

//set user area page
[process_table_shell_addr + 11] = 80;

//mark in mem
[MEMORY_FREE_LIST + 80] = 1;

//set user stack val
[process_table_shell_addr + 13] = 8*512;

//set kernel stack pointer
[process_table_shell_addr + 12] = 0;

//set page table len reg
[process_table_shell_addr + 15] = 10;

//set ip in user stack
[78*512] = [67*512 + 1];

return;




